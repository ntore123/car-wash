import { useState, useEffect } from 'react';
import { packageAPI } from '../services/api';
import PageHeader from '../components/ui/PageHeader';
import Button from '../components/ui/Button';
import Table from '../components/ui/Table';
import Modal from '../components/ui/Modal';
import FormInput from '../components/ui/FormInput';
import Alert from '../components/ui/Alert';
// Icons removed as per user request
import { useForm } from 'react-hook-form';
import Card from '../components/ui/Card';

function Packages() {
  const [packages, setPackages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const [currentPackage, setCurrentPackage] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  const { register: registerAdd, handleSubmit: handleSubmitAdd, formState: { errors: errorsAdd }, reset: resetAdd } = useForm();

  // Fetch all packages
  const fetchPackages = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await packageAPI.getAllPackages();
      if (response.data.success) {
        // Ensure PackagePrice is always a number
        const packagesWithNumericPrices = response.data.data.map(pkg => ({
          ...pkg,
          PackagePrice: pkg.PackagePrice ? parseFloat(pkg.PackagePrice) : 0
        }));
        setPackages(packagesWithNumericPrices);
      }
    } catch (err) {
      console.error('Error fetching packages:', err);
      setError('Failed to load packages. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Initial data load
  useEffect(() => {
    fetchPackages();
  }, []);



  // Add a new package
  const onAddPackage = async (data) => {
    try {
      setLoading(true);
      const response = await packageAPI.createPackage({
        packageName: data.packageName,
        packageDescription: data.packageDescription,
        packagePrice: parseFloat(data.packagePrice)
        // PackageNumber will be auto-generated by backend using UUID
      });
      if (response.data.success) {
        setSuccessMessage('Package added successfully');
        fetchPackages();
        setIsAddModalOpen(false);
        resetAdd();
      }
    } catch (err) {
      console.error('Error adding package:', err);
      setError(err.response?.data?.message || 'Failed to add package. Please try again.');
    } finally {
      setLoading(false);
    }
  };



  // View package details
  const handleViewClick = (pkg) => {
    setCurrentPackage(pkg);
    setIsEditModalOpen(true);
  };

  // Clear success message after 3 seconds
  useEffect(() => {
    if (successMessage) {
      const timer = setTimeout(() => {
        setSuccessMessage('');
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [successMessage]);

  // Table columns configuration
  const columns = [
    { key: 'PackageNumber', header: 'Package ID', render: (row) => (
      <span className="text-xs font-mono text-gray-600" title={row.PackageNumber}>
        {row.PackageNumber}
      </span>
    )},
    { key: 'PackageName', header: 'Name' },
    { key: 'PackageDescription', header: 'Description' },
    {
      key: 'PackagePrice',
      header: 'Price',
      render: (row) => `${(row.PackagePrice ? parseFloat(row.PackagePrice) : 0).toFixed(0)} RWF`
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (row) => (
        <div className="flex space-x-2">
          <button
            onClick={() => handleViewClick(row)}
            className="text-primary-600 hover:text-primary-800 px-2 py-1 text-sm"
            aria-label="View package details"
          >
            View
          </button>
        </div>
      ),
    },
  ];

  // Package cards for visual display
  const PackageCards = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
      {packages.map((pkg) => (
        <Card key={pkg.PackageNumber} className="hover:shadow-lg transition-shadow">
          <div className="flex justify-between">
            <h3 className="text-xl font-bold text-primary-800">{pkg.PackageName}</h3>
            <span className="text-xl font-bold text-primary-600">{(pkg.PackagePrice ? parseFloat(pkg.PackagePrice) : 0).toFixed(0)} RWF</span>
          </div>
          <p className="text-gray-600 mt-2">{pkg.PackageDescription || 'No description available'}</p>
          <div className="mt-4 flex justify-end space-x-2">
            <Button
              variant="secondary"
              size="sm"
              onClick={() => handleViewClick(pkg)}
            >
              View Details
            </Button>
          </div>
        </Card>
      ))}
    </div>
  );

  return (
    <div>
      <PageHeader
        title="Service Packages"
        description="Smart Pack - Rubavu | View available car service packages"
        actions={
          <Button onClick={() => setIsAddModalOpen(true)}>
            Add Package
          </Button>
        }
      />

      {/* Success message */}
      {successMessage && <Alert type="success" message={successMessage} />}

      {/* Error message */}
      {error && <Alert type="error" message={error} />}



      {/* Packages display */}
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
        </div>
      ) : packages.length > 0 ? (
        <>
          <PackageCards />
          <Table
            columns={columns}
            data={packages}
            emptyMessage="No packages found. Add a new package to get started."
          />
        </>
      ) : (
        <div className="text-center py-12 bg-white rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-2">No packages found</h3>
          <p className="text-gray-500 mb-6">Add your first service package to get started.</p>
          <Button onClick={() => setIsAddModalOpen(true)}>
            Add Package
          </Button>
        </div>
      )}

      {/* Add Package Modal */}
      <Modal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        title="Add New Package"
        footer={
          <>
            <Button variant="secondary" onClick={() => setIsAddModalOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" form="addPackageForm">
              Add Package
            </Button>
          </>
        }
      >
        <form id="addPackageForm" onSubmit={handleSubmitAdd(onAddPackage)}>

          <FormInput
            label="Package Name"
            {...registerAdd('packageName', { required: 'Package name is required' })}
            error={errorsAdd.packageName?.message}
            required
          />
          <FormInput
            label="Description"
            {...registerAdd('packageDescription')}
            error={errorsAdd.packageDescription?.message}
          />
          <FormInput
            label="Price"
            type="number"
            step="0.01"
            {...registerAdd('packagePrice', {
              required: 'Price is required',
              valueAsNumber: true,
              min: { value: 0, message: 'Price must be positive' }
            })}
            error={errorsAdd.packagePrice?.message}
            required
          />
        </form>
      </Modal>

      {/* View Package Details Modal */}
      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Package Details"
        footer={
          <>
            <Button variant="secondary" onClick={() => setIsEditModalOpen(false)}>
              Close
            </Button>
          </>
        }
      >
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Package ID</label>
            <div className="mt-1 p-2 bg-gray-50 border border-gray-200 rounded-md font-mono text-sm">
              {currentPackage?.PackageNumber}
            </div>
            <p className="text-xs text-gray-500 mt-1">System-generated unique identifier</p>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Package Name</label>
            <div className="mt-1 p-2 bg-gray-50 border border-gray-200 rounded-md">
              {currentPackage?.PackageName}
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Description</label>
            <div className="mt-1 p-2 bg-gray-50 border border-gray-200 rounded-md">
              {currentPackage?.PackageDescription || 'No description available'}
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Price</label>
            <div className="mt-1 p-2 bg-gray-50 border border-gray-200 rounded-md">
              {(currentPackage?.PackagePrice ? parseFloat(currentPackage.PackagePrice) : 0).toFixed(0)} RWF
            </div>
          </div>
        </div>
      </Modal>


    </div>
  );
}

export default Packages;
